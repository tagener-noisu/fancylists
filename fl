#!/usr/bin/env ruby

# Copyright (C) 2016, tagener-noisu <op4.renegat@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

require 'fileutils'
require 'getoptlong'

VERSION = "1.1.5"

STORAGE = "#{ENV["HOME"]}.fl"

class File
	def File.lock(f)
		return if !block_given?
		path = File.expand_path(f).split("/")
		file = path.pop
		path = path.join("/")
		Dir.chdir(path) {
			lock = file + ".lock"
			sleep(0.1) while (File.exist?(lock))
			FileUtils.touch(lock)
			yield
			FileUtils.rm(lock)
		}
	end
end

def list_contents(list)
	file = get_path(list)
	if (File.exist?(file))
		f = File.open(file, "r") { |f|
            f.each_line { |l|
                $stdout.print(l)
            }
        }
	end
end

def append(list)
	file = File.open(get_path(list), "a")
	while (!$stdin.eof?)
		file.print($stdin.gets)
	end
	file.close
end

def prepend(list)
	file = get_path(list)
	lines = File.readlines(file)
	file = File.open(file, "w")
	while (!$stdin.eof?)
		file.print($stdin.gets)
	end
	file.puts(lines)
	file.close
end

def pop(list)
	file = get_path(list)
	lines = File.readlines(file)
	File.open(file, "w") { |f|
		(lines.length - 1).times {
			f.print(lines.shift)
		}
	}
	$stdout.print(lines.shift)
end

def shift(list)
	file = get_path(list)
	lines = File.readlines(file)
	$stdout.print(lines.shift)
	File.open(file, "w") { |f|
		(lines.length).times {
			f.print(lines.shift)
		}
	}
end

def clear(list)
	file = get_path(list)
	if (File.exist?(file))
		File.delete(file)
	end
end

def print_lists
	Dir.foreach(STORAGE) { |f|
		if (!f.match(/^\./) && !f.match(/\.lock$/)) # skip dot files and locks
			puts(f)
		end
	}
end

def get_path(list)
	return File.join(STORAGE, list)
end

def print_usage
	$stderr.puts <<-EOF
fancylists v.#{VERSION}
Copyright (C) 2017 tagener-noisu <op4.renegat@gmail.com>
License: GNU General Public License version 3 <http://www.gnu.org/licenses/>
This is free software: you are free to change and redistribute it.
This program comes with ABSOLUTELY NO WARRANTY.

Usage:
print available non-empty lists: fl
operations on the list:          fl listname [option] ...

Options:
    -h, --help      print this usage
    -l, --list      print contents of the list
    -a, --append    append lines from the standard input to the list
    -b, --prepend   prepend lines from the standard input to the list
    -p, --pop       pop one line from the back of the list and print it
    -s, --shift     shift one line from the front of the list and print it
    -c, --clear     clear the list

Operations executed in the order of appearance
EOF
end

def init
	Dir.mkdir(STORAGE) if !Dir.exist?(STORAGE)
end

def driver
	init

	list_name = nil
	if (ARGV.length == 0)
		print_lists
		return
    end

    if (!ARGV[0].match(/^-/))
        list_name = ARGV.shift
    else
        print_usage
        return
    end

	operations = []
	GetoptLong.new(
		['--list', '-l', GetoptLong::NO_ARGUMENT],
		['--append', '-a', GetoptLong::NO_ARGUMENT],
		['--prepend', '-b', GetoptLong::NO_ARGUMENT],
		['--pop', '-p', GetoptLong::NO_ARGUMENT],
		['--shift', '-s', GetoptLong::NO_ARGUMENT],
		['--clear', '-c', GetoptLong::NO_ARGUMENT],
		['--help', '-h', GetoptLong::NO_ARGUMENT]
	).each { |opt, arg|
		case (opt)
        when "--list"
            operations << :list
		when "--append"
			operations << :append
		when "--prepend"
			operations << :prepend
		when "--pop"
			operations << :pop
		when "--shift"
			operations << :shift
		when "--clear"
			operations << :clear
		when "--help"
			print_usage
			return
		end
	}

	if (ARGV.length != 0 || operations.length == 0)
		print_usage
		exit
	end

	File.lock(get_path(list_name)) {
		operations.each { |op|
			case (op)
            when :list
                list_contents(list_name)
			when :append
				append(list_name)
			when :prepend
				prepend(list_name)
			when :pop
				pop(list_name)
			when :shift
				shift(list_name)
			when :clear
				clear(list_name)
			end
		}
	}
end

begin
	driver
rescue GetoptLong::InvalidOption
	print_usage
rescue => e
	$stderr.puts(e.message)
end
